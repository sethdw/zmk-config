/*
 * Seth's Corne/crkbd keymap using ZMK
 * Based off of miryoku
 * https://github.com/sethdwoolley/zmk-config
 *
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

// Layer Definition
#define DEFAULT 0
#define NAVI 1
#define NUM 2
#define FUNC 3
#define GAME 4
#define GNUM 5
#define MEDIA 6
#define NONE 0

/ {
//  Homerow mod held behaviour 
    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping_term_ms = <120>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
        // Double tap N for ESC
        nesc: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "N_FOR_ESC";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp N>, <&kp ESC>;
        };
    };


// HELD on each layer shows which key(s) are being held to access that layer
// #'s signify the split

    keymap {
        compatible = "zmk,keymap";

        default_layer {
// ---------------------------------------------------------------------------------------------------------
// |  F1 |   Q    |   W    |    F   |    P    |  G   | # |  J  |      L      |      U      |    Y   |   ;    |  F4   |
// |  F2 | A/LGUI | R/LALT | S/LCTL |    T    |  D   | # |  H  |    N/ESC    |   E/LCTRL   | I/LALT | O/LGUI | ENTER |
// |  F3 |   Z    |   X    |    C   |    V    |  B   | # |  N  |      M      |      ,      |    .   |   /    |  F5   |
//                         |  LCTL  | MO NAVI | LSFT | # | SPC | LT NUM BKSP | LT FUNC DEL |

            bindings = <
&kp F1  &kp Q        &kp W      &kp F      &kp P      &kp G         &kp J    &kp L        &kp U         &kp Y        &kp SCLN     &kp F4
&kp F2  &hm LGUI A   &hm LALT R &hm LCTL S &kp T      &kp D         &kp H    &nesc        &hm LCTL E    &hm LALT I   &hm LGUI O   &kp RET
&kp F3  &kp Z        &kp X      &kp C      &kp V      &kp B         &kp K    &kp M        &kp CMMA      &kp DOT      &kp FSLH     &kp F5
                                &kp LCTL   &mo NAVI   &kp LSFT      &kp SPC  &lt NUM BKSP &lt FUNC DEL
            >;
        };

        navigation {
// ---------------------------------------------------------------------------------------
// |     |      |      |  DEL  |      | TOGGLE GAME | # | DWN | RGT  |  INSERT |       |     |     |
// |     | LGUI | LALT | LCTL  | LSFT |     TAB     | # | LF  | DWN  |   UP    |  RGT  | ENT |     |
// |     |      | RALT |       |      |             | # | UP  | HOME |   END   |       |     |     |
//                     | BTCLR | HELD |     LSFT    | # | SPC | BKSP |   DEL   |

            bindings = <
&trans     &trans    &kp DEL    &trans      &tog GAME  &trans        &kp DARW  &kp RARW  &kp INS   &trans    &trans    &trans    
&trans     &kp LGUI  &kp LALT   &kp LCTL    &kp LSFT   &kp TAB       &kp LARW  &kp DARW  &kp UARW  &kp RARW  &kp RET   &trans
&kp LSFT   &trans    &trans     &trans      &trans     &trans        &kp UARW  &kp HOME  &kp END   &trans    &trans    &trans
                                &bt BT_CLR  &trans     &kp LSFT      &kp SPC   &kp BKSP  &kp DEL
            >;  
        };

        numbers {
// ---------------------------------------------------------------------------------
// |     |  [{ |  7  |  8  |  9  |  ]}  | # |     |      |      |      |      |     |
// |     |  '@ |  4  |  5  |  6  |  =+  | # |     |  SFT | CTRL | LALT | LGUI |     |
// |     |  #~ |  1  |  2  |  3  |  \|  | # |     |      |      | RALT |      |     | 
//                   |  .  |  0  |  -_  | # | WIN | HELD |      |

            bindings = <
&trans    &kp LBKT        &kp N7    &kp N8    &kp N9    &kp RBKT      &trans    &trans   &trans    &trans    &trans    &trans    
&trans    &kp QUOT        &kp N4    &kp N5    &kp N6    &kp EQL       &trans    &kp LSFT  &kp LCTL &kp LALT  &kp LGUI  &trans
&trans    &kp NON_US_HASH &kp N1    &kp N2    &kp N3    &kp BSLH      &trans    &trans   &kp RALT  &trans    &trans    &trans    
                                    &kp DOT   &kp N0    &kp MINUS     &kp LGUI  &trans   &trans
            >;
        };

        function_keys {
// -------------------------------------------------------------------------------------
// |     |  F12 |  F7  |  F8  |  F9  | PTSRN | # |     |     |      |      |      |     |
// |     |  F11 |  F4  |  F5  |  F6  | SCRLL | # |     | SFT | CTRL | LALT | LGUI |     |
// |     |  F10 |  F1  |  F2  |  F3  | PAUSE | # |     |     |      | RALT |      |     | 
//                     |      |      |  TAB  | # | WIN |     | HELD |

            bindings = <
&trans    &kp F12    &kp F7    &kp F8    &kp F9    &kp PRSC      &trans     &trans   &trans    &trans    &trans    &trans    
&trans    &kp F11    &kp F4    &kp F5    &kp F6    &trans        &trans     &kp LSFT &kp LCTL  &kp LALT  &kp LGUI  &trans
&trans    &kp F10    &kp F1    &kp F2    &kp F3    &trans        &trans     &trans   &kp RALT  &trans    &trans    &trans    
                               &trans    &trans    &kp LSFT      &kp LGUI   &trans   &trans
            >;
        };        

        gaming {
// ---------------------------------------------------------------------------------------------------------
// |  F1   |   Q   |   W   |   E   |    R    |  T   | # |  Y  |      U      |      I      |    O   |   P   |  F4   |
// |  NUMS |   A   |   S   |   D   |    F    |  G   | # |  H  |      J      |      K      |    L   |   ;   | ENTER |
// |  LSFT |   Z   |   X   |   C   |    V    |  B   | # |  N  |      M      |      ,      |    .   |   /   |  F5   |
//                         | LCTL  | MO NAVI | LSFT | # | SPC | TOGGLE GAME | LT FUNC DEL |

            bindings = <
&kp F1    &kp Q    &kp W    &kp E      &kp R     &kp T        &kp Y    &kp U      &kp I     &kp O    &kp P      &kp F4
&mo GNUM  &kp A    &kp S    &hm D      &kp F     &kp G        &kp H    &kp J      &kp K     &kp L    &kp SCLN   &kp RET
&kp LSFT  &kp Z    &kp X    &kp C      &kp V     &kp B        &kp N    &kp M      &kp CMMA  &kp DOT  &kp FSLH   &kp F5
                            &kp LSFT   &kp LCTL  &kp SPC      &kp SPC  &tog GAME  &lt FUNC DEL
            >;
        };

        gaming_numbers {
// ---------------------------------------------------------------------------------
// |      |  TOGGLE GAME |  7  |  8   |  9  |  ]}  | # |     |      |      |      |      |     |
// | HELD |       M      |  4  |  5   |  6  |  =+  | # |  LF | DWN  |  UP  | RGT  | ENT  |     |
// |      |       #~     |  1  |  2   |  3  |  \|  | # |     |      |      |      |      |     | 
//                             | LALT |  0  |  -_  | # | WIN |      |      |

            bindings = <
&trans    &tog GAME &kp N7    &kp N8    &kp N9    &kp RBKT      &trans    &trans   &trans    &trans    &trans    &trans    
&trans    &kp M     &kp N4    &kp N5    &kp N6    &kp EQL       &trans    &kp LSFT  &kp LCTL &kp LALT  &kp LGUI  &trans
&trans    &trans    &kp N1    &kp N2    &kp N3    &kp BSLH      &trans    &trans   &kp RALT  &trans    &trans    &trans    
                              &kp LALT  &kp N0    &kp MINUS     &kp LGUI  &trans   &trans
            >;
        };

        media_keys { // UNUSED
// -------------------------------------------------------------------------------------
// |     |      |      |      |      |      | # |      |      |      |      |     |     |
// |     | LGUI | LALT | LCTL | LSFT | TAB  | # | PREV | VOLD | VOLU | NEXT |     |     |
// |     |      | RALT |      |      |      | # |      |      |      |      |     |     |
//                     | HELD |      | LSFT | # | STOP | PLAY | MUTE |

            bindings = <
&trans     &trans    &trans     &trans     &trans     &trans        &trans     &trans     &trans     &trans     &trans    &trans    
&trans     &kp LGUI  &kp LALT   &kp LCTL   &kp LSFT   &kp TAB       &cp M_PREV &cp M_VOLD &cp M_VOLU &cp M_NEXT &trans    &trans
&kp LSFT   &trans    &trans     &trans     &trans     &trans        &trans     &trans     &trans     &trans     &trans    &trans
                                &trans     &trans     &kp LSFT      &cp M_STOP &cp M_PLAY &cp M_MUTE
            >;
        };
    };
};

